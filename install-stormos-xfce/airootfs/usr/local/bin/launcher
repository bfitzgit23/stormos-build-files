#!/usr/bin/env python3
"""
Modern Application Launcher
A sleek, feature-rich application launcher with favorites, recent apps, and system controls.
"""

import sys
import os
import subprocess
import json
import re
from pathlib import Path
from collections import defaultdict, deque
from typing import List, Dict, Any

from PyQt5.QtWidgets import (
    QApplication, QWidget, QVBoxLayout, QHBoxLayout, QLineEdit,
    QScrollArea, QPushButton, QLabel, QFrame, QButtonGroup, QShortcut
)
from PyQt5.QtCore import Qt, QTimer, QPropertyAnimation, QEasingCurve
from PyQt5.QtGui import QPixmap, QFont, QIcon, QKeySequence, QPainter, QColor

# =============================================================================
# CONSTANTS AND CONFIGURATION
# =============================================================================

CONFIG_DIR = Path.home() / ".config" / "modern_launcher"
FAV_FILE = CONFIG_DIR / "favorites.json"
RECENT_FILE = CONFIG_DIR / "recent.json"
CACHE_FILE = CONFIG_DIR / "apps_cache.json"

# Color scheme - Modern dark theme
COLORS = {
    "primary": "#2d3436",
    "secondary": "#636e72",
    "accent": "#0984e3",
    "accent_hover": "#74b9ff",
    "background": "rgba(45, 52, 54, 0.95)",
    "surface": "rgba(99, 110, 114, 0.3)",
    "text_primary": "#dfe6e9",
    "text_secondary": "#b2bec3",
    "success": "#00b894",
    "warning": "#fdcb6e",
    "danger": "#d63031"
}

# Category icons and mapping
CATEGORIES = {
    "Favorites": {"icon": "⭐", "color": COLORS["warning"]},
    "Recent": {"icon": "🕐", "color": COLORS["accent"]},
    "All Apps": {"icon": "💻", "color": COLORS["text_primary"]},
    "Multimedia": {"icon": "🎵", "color": "#e84393"},
    "Dev": {"icon": "🔧", "color": COLORS["success"]},
    "Games": {"icon": "🎮", "color": "#e17055"},
    "Graphics": {"icon": "🎨", "color": "#6c5ce7"},
    "Internet": {"icon": "🌐", "color": COLORS["accent"]},
    "Office": {"icon": "📊", "color": "#00cec9"},
    "System": {"icon": "⚙️", "color": COLORS["text_secondary"]},
    "Other": {"icon": "📦", "color": COLORS["secondary"]}
}

# =============================================================================
# UTILITY FUNCTIONS
# =============================================================================

def load_json(path: Path, default: Any) -> Any:
    """Safely load JSON data from file."""
    if path.exists():
        try:
            return json.loads(path.read_text())
        except (json.JSONDecodeError, OSError):
            pass
    return default

def save_json(path: Path, data: Any) -> None:
    """Safely save JSON data to file."""
    path.parent.mkdir(parents=True, exist_ok=True)
    try:
        path.write_text(json.dumps(data, indent=2))
    except OSError:
        pass

def get_system_icon_theme() -> str:
    """Detect system icon theme."""
    try:
        result = subprocess.run(
            ["xfconf-query", "-c", "xsettings", "-p", "/Net/IconThemeName"],
            stdout=subprocess.PIPE, stderr=subprocess.DEVNULL, text=True
        )
        if result.returncode == 0 and result.stdout.strip():
            return result.stdout.strip()
    except Exception:
        pass
    
    # Fallback icon themes
    for fallback in ["Papirus", "Adwaita", "gnome", "hicolor"]:
        if (Path("/usr/share/icons") / fallback).exists():
            return fallback
    return "hicolor"

# =============================================================================
# WIDGET COMPONENTS
# =============================================================================

class AppItem(QWidget):
    """Widget representing a single application item."""
    
    def __init__(self, app: Dict[str, Any], launcher: 'Launcher'):
        super().__init__()
        self.app = app
        self.launcher = launcher
        self.is_favorite = app["name"] in launcher.favorites
        self._init_ui()
        self._setup_animation()

    def _init_ui(self) -> None:
        """Initialize the user interface."""
        self.setFixedHeight(60)
        layout = QHBoxLayout(self)
        layout.setContentsMargins(12, 8, 12, 8)
        layout.setSpacing(12)

        # Application icon
        self.icon_label = QLabel()
        self.icon_label.setFixedSize(40, 40)
        self._load_icon()
        layout.addWidget(self.icon_label)

        # Application info
        text_layout = QVBoxLayout()
        text_layout.setSpacing(2)
        
        self.name_label = QLabel(self.app["name"])
        self.name_label.setFont(QFont("Segoe UI", 11, QFont.Bold))
        self.name_label.setStyleSheet(f"color: {COLORS['text_primary']};")
        text_layout.addWidget(self.name_label)
        
        if self.app.get("comment"):
            self.comment_label = QLabel(self.app["comment"])
            self.comment_label.setFont(QFont("Segoe UI", 9))
            self.comment_label.setStyleSheet(f"color: {COLORS['text_secondary']};")
            text_layout.addWidget(self.comment_label)
        
        layout.addLayout(text_layout)
        layout.addStretch()

        # Favorite indicator
        self.fav_indicator = QLabel("★" if self.is_favorite else "")
        self.fav_indicator.setFont(QFont("Segoe UI", 14))
        self.fav_indicator.setStyleSheet(f"color: {COLORS['warning']};")
        self.fav_indicator.setFixedWidth(20)
        layout.addWidget(self.fav_indicator)

        # Styling
        self.setStyleSheet(f"""
            AppItem {{
                background: transparent;
                border-radius: 8px;
                margin: 2px;
            }}
            AppItem:hover {{
                background: {COLORS['surface']};
                border: 1px solid {COLORS['accent']};
            }}
        """)

    def _load_icon(self) -> None:
        """Load and display application icon."""
        icon_name = self.app.get("icon")
        if icon_name:
            qicon = QIcon.fromTheme(icon_name)
            if not qicon.isNull():
                pixmap = qicon.pixmap(40, 40)
                self.icon_label.setPixmap(pixmap)
                return
        
        # Fallback icon
        self.icon_label.setText("📦")
        self.icon_label.setAlignment(Qt.AlignCenter)
        self.icon_label.setStyleSheet(f"""
            font-size: 20px;
            background: {COLORS['surface']};
            border-radius: 6px;
        """)

    def _setup_animation(self) -> None:
        """Setup hover animation."""
        self.animation = QPropertyAnimation(self, b"geometry")
        self.animation.setDuration(150)
        self.animation.setEasingCurve(QEasingCurve.OutCubic)

    def mousePressEvent(self, event) -> None:
        """Handle mouse press events."""
        if event.button() == Qt.LeftButton:
            if event.modifiers() & Qt.ControlModifier:
                self._toggle_favorite()
            else:
                self.launcher.launch_app(self.app)
        elif event.button() == Qt.RightButton:
            self._toggle_favorite()
        else:
            super().mousePressEvent(event)

    def _toggle_favorite(self) -> None:
        """Toggle favorite status of the app."""
        name = self.app["name"]
        if name in self.launcher.favorites:
            self.launcher.favorites.remove(name)
            self.is_favorite = False
            self.fav_indicator.setText("")
        else:
            self.launcher.favorites.append(name)
            self.is_favorite = True
            self.fav_indicator.setText("★")
        
        save_json(FAV_FILE, self.launcher.favorites)
        self.launcher.filter_apps()  # Refresh to update favorites view

# =============================================================================
# MAIN LAUNCHER
# =============================================================================

class Launcher(QWidget):
    """Modern application launcher main window."""
    
    def __init__(self):
        super().__init__()
        self.favorites = load_json(FAV_FILE, [])
        self.recent = deque(load_json(RECENT_FILE, []), maxlen=15)
        self.apps: List[Dict[str, Any]] = []
        self.categories = defaultdict(list)
        self.current_category = "All Apps"
        self.category_buttons = {}
        
        self._init_window()
        self._init_ui()
        self._setup_shortcuts()
        self._center_window()
        
        # Load applications with a slight delay for smoother UI
        QTimer.singleShot(50, self.load_apps)
        
        # *** NEW: Focus the search bar after UI is initialized ***
        self.search_bar.setFocus()
        # *** END NEW ***


    def _init_window(self) -> None:
        """Initialize window properties."""
        # *** CHANGED: Re-added Qt.Popup flag, kept Qt.WindowStaysOnTopHint ***
        # Qt.Popup is generally better for closing on external clicks.
        self.setWindowFlags(Qt.FramelessWindowHint | Qt.Popup | Qt.WindowStaysOnTopHint)
        # *** END CHANGED ***
        
        self.setAttribute(Qt.WA_TranslucentBackground)
        # *** CHANGED: Set focus policy to ensure focusOutEvent works with Qt.Popup ***
        self.setFocusPolicy(Qt.StrongFocus)
        # *** END CHANGED ***
        self.setFixedSize(800, 600)

    def _init_ui(self) -> None:
        """Initialize the user interface."""
        main_layout = QVBoxLayout(self)
        main_layout.setContentsMargins(20, 20, 20, 20)
        main_layout.setSpacing(15)

        # Search bar
        self._create_search_bar(main_layout)
        
        # Body content
        body_layout = QHBoxLayout()
        body_layout.setSpacing(20)
        
        self._create_sidebar(body_layout)
        self._create_apps_area(body_layout)
        
        main_layout.addLayout(body_layout)
        
        # System controls
        self._create_system_controls(main_layout)

    def _create_search_bar(self, parent_layout: QVBoxLayout) -> None:
        """Create the search bar component."""
        self.search_bar = QLineEdit()
        self.search_bar.setPlaceholderText("🔍 Search applications or type: calc 2+2 | web query | run command")
        self.search_bar.textChanged.connect(self.filter_apps)
        self.search_bar.returnPressed.connect(self._handle_special_commands)
        self.search_bar.setStyleSheet(f"""
            QLineEdit {{
                background: {COLORS['surface']};
                color: {COLORS['text_primary']};
                border: 2px solid {COLORS['secondary']};
                border-radius: 12px;
                padding: 12px 16px;
                font-size: 14px;
                font-family: 'Segoe UI';
            }}
            QLineEdit:focus {{
                border-color: {COLORS['accent']};
            }}
        """)
        parent_layout.addWidget(self.search_bar)

    def _create_sidebar(self, parent_layout: QHBoxLayout) -> None:
        """Create the category sidebar."""
        sidebar_layout = QVBoxLayout()
        sidebar_layout.setSpacing(6)
        
        self.cat_group = QButtonGroup(self)
        self.cat_group.setExclusive(True)

        for cat_key, cat_info in CATEGORIES.items():
            btn = QPushButton(f"{cat_info['icon']} {cat_key}")
            btn.setCheckable(True)
            btn.setFixedHeight(40)
            btn.clicked.connect(lambda checked, k=cat_key: self.switch_category(k))
            
            # Dynamic styling based on category color
            btn.setStyleSheet(f"""
                QPushButton {{
                    background: {COLORS['surface']};
                    color: {COLORS['text_primary']};
                    border: 1px solid transparent;
                    border-radius: 8px;
                    padding: 8px 12px;
                    text-align: left;
                    font-family: 'Segoe UI';
                }}
                QPushButton:hover {{
                    background: {cat_info['color']}33;
                    border-color: {cat_info['color']};
                }}
                QPushButton:checked {{
                    background: {cat_info['color']}44;
                    border: 2px solid {cat_info['color']};
                    font-weight: bold;
                }}
            """)
            
            self.cat_group.addButton(btn)
            self.category_buttons[cat_key] = btn
            sidebar_layout.addWidget(btn)

        sidebar_layout.addStretch()
        sidebar_frame = QFrame()
        sidebar_frame.setLayout(sidebar_layout)
        sidebar_frame.setFixedWidth(200)
        parent_layout.addWidget(sidebar_frame)

    def _create_apps_area(self, parent_layout: QHBoxLayout) -> None:
        """Create the applications scroll area."""
        self.scroll_area = QScrollArea()
        self.scroll_area.setWidgetResizable(True)
        self.scroll_area.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
        self.scroll_area.setVerticalScrollBarPolicy(Qt.ScrollBarAsNeeded)
        self.scroll_area.setStyleSheet(f"""
            QScrollArea {{
                border: none;
                background: transparent;
            }}
            QScrollBar:vertical {{
                background: {COLORS['surface']};
                width: 10px;
                margin: 0px;
                border-radius: 5px;
            }}
            QScrollBar::handle:vertical {{
                background: {COLORS['accent']};
                border-radius: 5px;
                min-height: 20px;
            }}
            QScrollBar::handle:vertical:hover {{
                background: {COLORS['accent_hover']};
            }}
        """)

        self.apps_container = QWidget()
        self.apps_layout = QVBoxLayout(self.apps_container)
        self.apps_layout.setSpacing(4)
        # Removed the initial addStretch() to prevent whitespace
        self.scroll_area.setWidget(self.apps_container)
        
        # *** NEW: Explicitly set the background of the apps container to be transparent ***
        self.apps_container.setStyleSheet("background: transparent;")
        # *** END NEW ***
        
        parent_layout.addWidget(self.scroll_area)

    def _create_system_controls(self, parent_layout: QVBoxLayout) -> None:
        """Create system control buttons."""
        controls_layout = QHBoxLayout()
        controls_layout.setSpacing(8)
        
        system_actions = [
            ("🔒 Lock", self._lock_system, COLORS["secondary"]),
            ("🚪 Logout", self._logout, COLORS["warning"]),
            ("🔄 Reboot", self._reboot, COLORS["accent"]),
            ("⏻ Shutdown", self._shutdown, COLORS["danger"])
        ]

        for text, callback, color in system_actions:
            btn = QPushButton(text)
            btn.clicked.connect(callback)
            btn.setFixedHeight(35)
            btn.setStyleSheet(f"""
                QPushButton {{
                    background: {color}33;
                    color: {COLORS['text_primary']};
                    border: 1px solid {color};
                    border-radius: 6px;
                    padding: 6px;
                    font-family: 'Segoe UI';
                    font-weight: bold;
                }}
                QPushButton:hover {{
                    background: {color}66;
                }}
            """)
            controls_layout.addWidget(btn)

        parent_layout.addLayout(controls_layout)

    def _setup_shortcuts(self) -> None:
        """Setup keyboard shortcuts."""
        # Escape key shortcut - explicitly connects to close
        QShortcut(QKeySequence("Escape"), self).activated.connect(self.close)
        QShortcut(QKeySequence("Ctrl+F"), self).activated.connect(
            lambda: self.search_bar.setFocus()
        )

    def _center_window(self) -> None:
        """Center the window on screen."""
        screen_geo = QApplication.primaryScreen().availableGeometry()
        self.move(
            screen_geo.center().x() - self.width() // 2,
            screen_geo.center().y() - self.height() // 2
        )

    def paintEvent(self, event) -> None:
        """Draw window background with rounded corners."""
        painter = QPainter(self)
        painter.setRenderHint(QPainter.Antialiasing)
        painter.setBrush(QColor(COLORS["background"]))
        painter.setPen(Qt.NoPen)
        painter.drawRoundedRect(self.rect(), 16, 16)

    def focusOutEvent(self, event) -> None:
        """Close launcher when focus is lost (e.g., clicking outside)."""
        # This should be triggered reliably with Qt.Popup flag when clicking outside
        self.close()

    # =========================================================================
    # APPLICATION MANAGEMENT
    # =========================================================================

    def load_apps(self) -> None:
        """Load applications from desktop files with caching."""
        desktop_dirs = [
            Path("/usr/share/applications"),
            Path.home() / ".local/share/applications"
        ]

        current_files = set()
        for d in desktop_dirs:
            if d.exists():
                for f in d.glob("*.desktop"):
                    try:
                        current_files.add(str(f.resolve()))
                    except OSError:
                        continue
        current_files_sorted = sorted(current_files)
        current_files_hash = str(hash(tuple(current_files_sorted)))

        use_cache = False
        if CACHE_FILE.exists():
            try:
                cache_data = json.loads(CACHE_FILE.read_text())
                cached_hash = cache_data.get("desktop_files_hash")
                if cached_hash == current_files_hash:
                    valid_apps = []
                    for app in cache_data.get("apps", []):
                        df = app.get("desktop_file")
                        if df and Path(df).exists():
                            valid_apps.append(app)
                    self.apps = valid_apps
                    self.categories = defaultdict(list)
                    for app in self.apps:
                        self.categories[app["category"]].append(app)
                    use_cache = True
            except Exception:
                pass

        if use_cache:
            self.switch_category(self.current_category)
            return

        # Category mapping (same as your original)
        cat_map = {
            "Audio": "Multimedia",
            "Video": "Multimedia",
            "AudioVideo": "Multimedia",
            "Development": "Dev",
            "Game": "Games",
            "Graphics": "Graphics",
            "Network": "Internet",
            "Office": "Office",
            "Science": "Other",
            "Settings": "System",
            "System": "System",
            "Utility": "Other",
            "Building": "Dev",
            "Debugger": "Dev",
            "IDE": "Dev",
            "GUIDesigner": "Dev",
            "Profiling": "Dev",
            "RevisionControl": "Dev",
            "Translation": "Dev",
            "Calendar": "Office",
            "ContactManagement": "Office",
            "Database": "Office",
            "Dictionary": "Office",
            "Chart": "Office",
            "Email": "Internet",
            "Telephony": "Internet",
            "WebBrowser": "Internet",
            "InstantMessaging": "Internet",
            "Feed": "Internet",
            "News": "Internet",
            "P2P": "Internet",
            "RemoteAccess": "Internet",
            "TelephonyTools": "Internet",
            "TextTools": "Office",
            "Viewer": "Office",
            "2DGraphics": "Graphics",
            "3DGraphics": "Graphics",
            "RasterGraphics": "Graphics",
            "VectorGraphics": "Graphics",
            "Scanning": "Graphics",
            "OCR": "Graphics",
            "Photography": "Graphics",
            "Publishing": "Graphics",
            "Music": "Multimedia",
            "Midi": "Multimedia",
            "Sequencer": "Multimedia",
            "Tuner": "Multimedia",
            "TV": "Multimedia",
            "AudioVideoEditing": "Multimedia",
            "Player": "Multimedia",
            "Recorder": "Multimedia",
            "DiscBurning": "Multimedia",
            "ActionGame": "Games",
            "AdventureGame": "Games",
            "ArcadeGame": "Games",
            "BoardGame": "Games",
            "BlocksGame": "Games",
            "CardGame": "Games",
            "KidsGame": "Games",
            "LogicGame": "Games",
            "RolePlaying": "Games",
            "Simulation": "Games",
            "SportsGame": "Games",
            "StrategyGame": "Games",
            "Art": "Other",
            "Construction": "Other",
            "Education": "Other",
            "Languages": "Other",
            "Religion": "Other",
            "Security": "System",
            "Accessibility": "Other",
        }

        self.apps.clear()
        self.categories.clear()

        for d in desktop_dirs:
            if not d.is_dir():
                continue
            for p in d.glob("*.desktop"):
                try:
                    full_path = str(p.resolve())
                    txt = p.read_text(errors='ignore')
                    if "NoDisplay=true" in txt:
                        continue
                    name_match = re.search(r'^Name=(.+)$', txt, re.M)
                    exec_match = re.search(r'^Exec=(.+)$', txt, re.M)
                    if not (name_match and exec_match):
                        continue
                    icon_match = re.search(r'^Icon=(.+)$', txt, re.M)
                    comment_match = re.search(r'^Comment=(.+)$', txt, re.M)
                    cats_match = re.search(r'^Categories=(.+)$', txt, re.M)

                    app_cat = "Other"
                    if cats_match:
                        for c in cats_match.group(1).split(';'):
                            if c in cat_map:
                                app_cat = cat_map[c]
                                break

                    app = {
                        "name": name_match.group(1),
                        "exec": re.sub(r'%[uUfF].*', '', exec_match.group(1)).strip(),
                        "icon": icon_match.group(1) if icon_match else None,
                        "comment": comment_match.group(1) if comment_match else "",
                        "category": app_cat,
                        "desktop_file": full_path
                    }
                    self.apps.append(app)
                    self.categories[app_cat].append(app)
                except Exception:
                    continue

        cache_data = {
            "desktop_files_hash": current_files_hash,
            "apps": self.apps,
            "categories": dict(self.categories)
        }
        save_json(CACHE_FILE, cache_data)
        self.switch_category(self.current_category)

    def switch_category(self, category: str) -> None:
        """Switch to a different application category."""
        self.current_category = category
        if category in self.category_buttons:
            self.category_buttons[category].setChecked(True)
        self.filter_apps()

    def filter_apps(self) -> None:
        """Filter applications based on search query and category."""
        query = self.search_bar.text().lower().strip()

        # Clear existing apps (but keep the stretch at the end)
        while self.apps_layout.count() > 1:
            item = self.apps_layout.takeAt(0)
            if item.widget():
                item.widget().deleteLater()

        # Get apps for current category
        if self.current_category == "Favorites":
            apps = [a for a in self.apps if a["name"] in self.favorites]
        elif self.current_category == "Recent":
            apps = [a for a in self.apps if a["name"] in self.recent]
        elif self.current_category == "All Apps":
            apps = self.apps
        else:
            apps = self.categories.get(self.current_category, [])

        # Apply search filter
        if query:
            apps = [
                a for a in apps
                if query in a["name"].lower() or 
                   (a.get("comment") and query in a["comment"].lower())
            ]

        # Display apps
        for app in sorted(apps, key=lambda x: x["name"].lower()):
            self.apps_layout.insertWidget(
                self.apps_layout.count() - 1, 
                AppItem(app, self)
            )

        # Show empty state if no apps found
        if not apps:
            empty_label = QLabel("No applications found")
            empty_label.setAlignment(Qt.AlignCenter)
            empty_label.setStyleSheet(f"color: {COLORS['text_secondary']}; font-style: italic; padding: 40px;")
            self.apps_layout.insertWidget(0, empty_label)

    def launch_app(self, app: Dict[str, Any]) -> None:
        """Launch an application."""
        # Add to recent apps
        if app["name"] in self.recent:
            self.recent.remove(app["name"])
        self.recent.appendleft(app["name"])
        save_json(RECENT_FILE, list(self.recent))

        # Launch application
        try:
            # Clean up Exec command (remove field codes)
            exec_cmd = re.sub(r' %[UuFf]', '', app["exec"]).strip()
            subprocess.Popen(exec_cmd.split(), start_new_session=True)
        except Exception as e:
            print(f"Failed to launch {app['name']}: {e}")

        self.close()

    def _handle_special_commands(self) -> None:
        """Handle special commands in search bar."""
        text = self.search_bar.text().strip()
        if not text:
            return

        if text.startswith("calc "):
            self._calculate_expression(text[5:])
        elif text.startswith("web "):
            self._web_search(text[4:])
        elif text.startswith("run "):
            self._run_command(text[4:])
        else:
            # Launch first matching app
            for i in range(self.apps_layout.count() - 1):
                item = self.apps_layout.itemAt(i)
                if item and (widget := item.widget()):
                    if isinstance(widget, AppItem):
                        self.launch_app(widget.app)
                        return

    def _calculate_expression(self, expression: str) -> None:
        """Calculate mathematical expression."""
        try:
            # Replace common symbols
            expr = expression.replace('^', '**').replace('×', '*').replace('÷', '/')
            result = eval(expr, {"__builtins__": {}})
            print(f"Calculation result: {result}")
        except Exception as e:
            print(f"Calculation error: {e}")

    def _web_search(self, query: str) -> None:
        """Perform web search."""
        import urllib.parse
        encoded_query = urllib.parse.quote(query)
        subprocess.Popen([
            "xdg-open", f"https://duckduckgo.com/?q={encoded_query}"
        ])
        self.close()

    def _run_command(self, command: str) -> None:
        """Run shell command."""
        subprocess.Popen(command, shell=True, start_new_session=True)
        self.close()

    # =========================================================================
    # SYSTEM ACTIONS
    # =========================================================================

    def _lock_system(self) -> None:
        """Lock the system."""
        for cmd in ["i3lock", "loginctl lock-session", "xdg-screensaver lock"]:
            try:
                subprocess.run(cmd, shell=True, start_new_session=True)
                break
            except Exception:
                continue
        self.close()

    def _logout(self) -> None:
        """Log out from the session."""
        for cmd in ["i3-msg exit", "xfce4-session-logout --logout", "gnome-session-quit"]:
            try:
                subprocess.run(cmd, shell=True, start_new_session=True)
                break
            except Exception:
                continue
        self.close()

    def _reboot(self) -> None:
        """Reboot the system."""
        subprocess.run(["systemctl", "reboot"])
        self.close()

    def _shutdown(self) -> None:
        """Shutdown the system."""
        subprocess.run(["systemctl", "poweroff"])
        self.close()

# =============================================================================
# APPLICATION ENTRY POINT
# =============================================================================

def main():
    """Application entry point."""
    app = QApplication(sys.argv)
    app.setQuitOnLastWindowClosed(False)
    app.setStyle("Fusion")
    
    # Set application-wide font
    font = QFont("Segoe UI", 10)
    app.setFont(font)
    
    # Configure icon theme
    icon_theme = get_system_icon_theme()
    QIcon.setThemeName(icon_theme)
    
    # Create and show launcher
    launcher = Launcher()
    launcher.show()
    # *** NEW: Ensure the window gets focus and is raised to the top, then focus the search bar ***
    launcher.raise_()
    launcher.activateWindow()
    # launcher.search_bar.setFocus() # This is now done in __init__ after UI setup
    # *** END NEW ***
    
    sys.exit(app.exec_())

if __name__ == "__main__":
    main()