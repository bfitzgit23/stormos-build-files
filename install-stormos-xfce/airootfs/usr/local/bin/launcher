#!/usr/bin/env python3
import sys
import os
import subprocess
import json
import re
from pathlib import Path
from collections import defaultdict, deque
from PyQt5.QtWidgets import (
    QApplication, QWidget, QVBoxLayout, QHBoxLayout, QLineEdit,
    QScrollArea, QPushButton, QLabel, QFrame, QButtonGroup
)
from PyQt5.QtCore import Qt, QTimer
from PyQt5.QtGui import QPixmap, QFont, QIcon

CONFIG_DIR = Path.home() / ".config" / "simple_launcher"
FAV_FILE = CONFIG_DIR / "favorites.json"
RECENT_FILE = CONFIG_DIR / "recent.json"
CACHE_FILE = CONFIG_DIR / "apps_cache.json"

def load_json(path, default):
    if path.exists():
        try:
            return json.loads(path.read_text())
        except:
            pass
    return default

def save_json(path, data):
    path.parent.mkdir(parents=True, exist_ok=True)
    path.write_text(json.dumps(data, indent=2))

class AppItem(QWidget):
    def __init__(self, app, launcher):
        super().__init__()
        self.app = app
        self.launcher = launcher
        self.init_ui()

    def init_ui(self):
        layout = QHBoxLayout(self)
        layout.setContentsMargins(8, 6, 8, 6)
        icon_label = QLabel()
        icon_label.setFixedSize(32, 32)

        icon_name = self.app.get("icon")
        if icon_name:
            qicon = QIcon.fromTheme(icon_name)
            if not qicon.isNull():
                pix = qicon.pixmap(32, 32)
                icon_label.setPixmap(pix)
            else:
                icon_label.setText("üì¶")
                icon_label.setStyleSheet("font-size: 18px;")
        else:
            icon_label.setText("üì¶")
            icon_label.setStyleSheet("font-size: 18px;")

        text_layout = QVBoxLayout()
        name_label = QLabel(self.app["name"])
        name_label.setFont(QFont("", 10, QFont.Bold))
        text_layout.addWidget(name_label)
        if self.app.get("comment"):
            comment_label = QLabel(self.app["comment"])
            comment_label.setStyleSheet("font-size: 9pt; color: #aaa;")
            text_layout.addWidget(comment_label)

        layout.addWidget(icon_label)
        layout.addLayout(text_layout)
        layout.addStretch()
        self.setStyleSheet("AppItem:hover { background: rgba(52, 152, 219, 0.2); border-radius: 6px; }")

    def mousePressEvent(self, e):
        if e.button() == Qt.LeftButton:
            if e.modifiers() & Qt.ControlModifier:
                self.toggle_favorite()
            else:
                self.launcher.launch_app(self.app)
        elif e.button() == Qt.RightButton:
            self.toggle_favorite()
        else:
            super().mousePressEvent(e)

    def toggle_favorite(self):
        name = self.app["name"]
        if name in self.launcher.favorites:
            self.launcher.favorites.remove(name)
        else:
            self.launcher.favorites.append(name)
        save_json(FAV_FILE, self.launcher.favorites)

class Launcher(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowFlags(Qt.FramelessWindowHint | Qt.Popup | Qt.WindowStaysOnTopHint)
        self.setAttribute(Qt.WA_TranslucentBackground)
        self.setFocusPolicy(Qt.StrongFocus)

        self.setStyleSheet("""
            QWidget { background: #1e1e1e; color: white; border-radius: 12px; }
            QLineEdit {
                background: #2a2a2a; color: white; border: 2px solid #444;
                border-radius: 8px; padding: 10px; font-size: 14px;
            }
            QPushButton {
                background: #2a2a2a; color: white; border: 1px solid #444;
                border-radius: 6px; padding: 6px; text-align: left;
            }
            QPushButton:hover { background: rgba(255,255,255,0.1); }
            QPushButton:checked { background: #3498db; font-weight: bold; }
        """)
        self.favorites = load_json(FAV_FILE, [])
        self.recent = deque(load_json(RECENT_FILE, []), maxlen=10)
        self.apps = []
        self.categories = defaultdict(list)
        self.current_category = "All Apps"
        self.category_buttons = {}
        self.init_ui()
        self.center()
        self.search_bar.setFocus()

        from PyQt5.QtWidgets import QShortcut
        from PyQt5.QtGui import QKeySequence
        QShortcut(QKeySequence("Escape"), self).activated.connect(self.close_launcher)

        QTimer.singleShot(0, self.load_apps)

    def focusOutEvent(self, event):
        self.close()

    def init_ui(self):
        # Wider window to accommodate all categories
        self.resize(720, 560)
        main = QVBoxLayout(self)
        main.setContentsMargins(15, 15, 15, 15)

        self.search_bar = QLineEdit()
        self.search_bar.setPlaceholderText("Search apps or type: calc 2+2 | web query | run command")
        self.search_bar.textChanged.connect(self.filter_apps)
        self.search_bar.returnPressed.connect(self.handle_return)
        main.addWidget(self.search_bar)

        body = QHBoxLayout()

        sidebar_layout = QVBoxLayout()
        sidebar_layout.setSpacing(4)  # tighter spacing
        self.cat_group = QButtonGroup(self)
        self.cat_group.setExclusive(True)

        # All categories ‚Äî buttons always shown
        categories = [
            ("Favorites", "‚≠ê Favorites"),
            ("Recent", "üïê Recent"),
            ("All Apps", "üíª All Apps"),
            ("Multimedia", "üéµ Multimedia"),
            ("Dev", "üíª Development"),
            ("Games", "üéÆ Games"),
            ("Graphics", "üñºÔ∏è Graphics"),
            ("Internet", "üåê Internet"),
            ("Office", "üíº Office"),
            ("System", "üîß System"),
            ("Other", "üìÅ Other"),
        ]

        for key, label in categories:
            btn = QPushButton(label)
            btn.setCheckable(True)
            btn.clicked.connect(lambda _, k=key: self.switch_category(k))
            self.cat_group.addButton(btn)
            self.category_buttons[key] = btn
            sidebar_layout.addWidget(btn)

        sidebar_layout.addStretch()
        sidebar_frame = QFrame()
        sidebar_frame.setLayout(sidebar_layout)
        sidebar_frame.setMaximumWidth(190)  # more room for labels
        body.addWidget(sidebar_frame)

        self.scroll = QScrollArea()
        self.scroll.setWidgetResizable(True)
        self.container = QWidget()
        self.app_layout = QVBoxLayout(self.container)
        self.app_layout.addStretch()
        self.scroll.setWidget(self.container)
        body.addWidget(self.scroll)

        main.addLayout(body)

        sys_row = QHBoxLayout()
        actions = [
            ("üîí Lock", self.lock),
            ("üö™ Logout", self.logout),
            ("üîÑ Reboot", self.reboot),
            ("üõë Power Off", self.shutdown)
        ]
        for text, func in actions:
            btn = QPushButton(text)
            btn.clicked.connect(func)
            sys_row.addWidget(btn)
        main.addLayout(sys_row)

    def center(self):
        screen = QApplication.primaryScreen().availableGeometry()
        self.move(screen.center() - self.rect().center())

    def load_apps(self):
        desktop_dirs = [
            Path("/usr/share/applications"),
            Path.home() / ".local/share/applications"
        ]

        current_files = set()
        for d in desktop_dirs:
            if d.exists():
                for f in d.glob("*.desktop"):
                    try:
                        current_files.add(str(f.resolve()))
                    except OSError:
                        continue
        current_files_sorted = sorted(current_files)
        current_files_hash = str(hash(tuple(current_files_sorted)))

        use_cache = False
        if CACHE_FILE.exists():
            try:
                cache_data = json.loads(CACHE_FILE.read_text())
                cached_hash = cache_data.get("desktop_files_hash")
                if cached_hash == current_files_hash:
                    valid_apps = []
                    for app in cache_data.get("apps", []):
                        df = app.get("desktop_file")
                        if df and Path(df).exists():
                            valid_apps.append(app)
                    self.apps = valid_apps
                    self.categories = defaultdict(list)
                    for app in self.apps:
                        self.categories[app["category"]].append(app)
                    use_cache = True
            except Exception:
                pass

        if use_cache:
            self.switch_category(self.current_category)
            return

        self.apps.clear()
        self.categories.clear()
        cat_map = {
            "Audio": "Multimedia",
            "Video": "Multimedia",
            "AudioVideo": "Multimedia",
            "Development": "Dev",
            "Game": "Games",
            "Graphics": "Graphics",
            "Network": "Internet",
            "Office": "Office",
            "Science": "Other",
            "Settings": "System",
            "System": "System",
            "Utility": "Other",
            "Building": "Dev",
            "Debugger": "Dev",
            "IDE": "Dev",
            "GUIDesigner": "Dev",
            "Profiling": "Dev",
            "RevisionControl": "Dev",
            "Translation": "Dev",
            "Calendar": "Office",
            "ContactManagement": "Office",
            "Database": "Office",
            "Dictionary": "Office",
            "Chart": "Office",
            "Email": "Internet",
            "Telephony": "Internet",
            "WebBrowser": "Internet",
            "InstantMessaging": "Internet",
            "Feed": "Internet",
            "News": "Internet",
            "P2P": "Internet",
            "RemoteAccess": "Internet",
            "TelephonyTools": "Internet",
            "TextTools": "Office",
            "Viewer": "Office",
            "2DGraphics": "Graphics",
            "3DGraphics": "Graphics",
            "RasterGraphics": "Graphics",
            "VectorGraphics": "Graphics",
            "Scanning": "Graphics",
            "OCR": "Graphics",
            "Photography": "Graphics",
            "Publishing": "Graphics",
            "Music": "Multimedia",
            "Midi": "Multimedia",
            "Sequencer": "Multimedia",
            "Tuner": "Multimedia",
            "TV": "Multimedia",
            "AudioVideoEditing": "Multimedia",
            "Player": "Multimedia",
            "Recorder": "Multimedia",
            "DiscBurning": "Multimedia",
            "ActionGame": "Games",
            "AdventureGame": "Games",
            "ArcadeGame": "Games",
            "BoardGame": "Games",
            "BlocksGame": "Games",
            "CardGame": "Games",
            "KidsGame": "Games",
            "LogicGame": "Games",
            "RolePlaying": "Games",
            "Simulation": "Games",
            "SportsGame": "Games",
            "StrategyGame": "Games",
            "Art": "Other",
            "Construction": "Other",
            "Education": "Other",
            "Languages": "Other",
            "Religion": "Other",
            "Security": "System",
            "Accessibility": "Other",
        }

        for d in desktop_dirs:
            if not d.is_dir():
                continue
            for p in d.glob("*.desktop"):
                try:
                    full_path = str(p.resolve())
                    txt = p.read_text(errors='ignore')
                    if "NoDisplay=true" in txt:
                        continue
                    name_match = re.search(r'^Name=(.+)$', txt, re.M)
                    exec_match = re.search(r'^Exec=(.+)$', txt, re.M)
                    if not (name_match and exec_match):
                        continue
                    icon_match = re.search(r'^Icon=(.+)$', txt, re.M)
                    comment_match = re.search(r'^Comment=(.+)$', txt, re.M)
                    cats_match = re.search(r'^Categories=(.+)$', txt, re.M)

                    app_cat = "Other"
                    if cats_match:
                        for c in cats_match.group(1).split(';'):
                            if c in cat_map:
                                app_cat = cat_map[c]
                                break

                    app = {
                        "name": name_match.group(1),
                        "exec": re.sub(r'%[uUfF].*', '', exec_match.group(1)).strip(),
                        "icon": icon_match.group(1) if icon_match else None,
                        "comment": comment_match.group(1) if comment_match else "",
                        "category": app_cat,
                        "desktop_file": full_path
                    }
                    self.apps.append(app)
                    self.categories[app_cat].append(app)
                except Exception:
                    continue

        cache_data = {
            "desktop_files_hash": current_files_hash,
            "apps": self.apps,
            "categories": dict(self.categories)
        }
        save_json(CACHE_FILE, cache_data)
        self.switch_category(self.current_category)

    def switch_category(self, cat):
        self.current_category = cat
        if cat in self.category_buttons:
            self.category_buttons[cat].setChecked(True)
        self.filter_apps()

    def filter_apps(self):
        query = self.search_bar.text().lower()

        while self.app_layout.count() > 1:
            item = self.app_layout.takeAt(0)
            if item.widget():
                item.widget().deleteLater()

        if self.current_category == "Favorites":
            apps = [a for a in self.apps if a["name"] in self.favorites]
        elif self.current_category == "Recent":
            apps = [a for a in self.apps if a["name"] in self.recent]
        elif self.current_category == "All Apps":
            apps = self.apps
        else:
            apps = self.categories.get(self.current_category, [])

        if query:
            apps = [
                a for a in apps
                if query in a["name"].lower() or (a.get("comment") and query in a["comment"].lower())
            ]

        for app in apps:
            self.app_layout.insertWidget(self.app_layout.count() - 1, AppItem(app, self))

    def launch_app(self, app):
        self.recent.appendleft(app["name"])
        save_json(RECENT_FILE, list(self.recent))
        try:
            subprocess.Popen(app["exec"].split(), start_new_session=True)
        except Exception as e:
            print("Launch error:", e)
        self.close()

    def handle_return(self):
        text = self.search_bar.text().strip()
        if not text:
            return
        if text.startswith("calc "):
            try:
                res = eval(text[5:].replace('^', '**'))
                print("Result:", res)
            except Exception:
                pass
        elif text.startswith("web "):
            import urllib.parse
            q = urllib.parse.quote(text[4:])
            subprocess.Popen(["xdg-open", f"https://duckduckgo.com/?q={q}"])
            self.close()
        elif text.startswith("run "):
            subprocess.Popen(text[4:], shell=True, start_new_session=True)
            self.close()
        else:
            for i in range(self.app_layout.count() - 1):
                w = self.app_layout.itemAt(i).widget()
                if isinstance(w, AppItem):
                    self.launch_app(w.app)
                    return

    def close_launcher(self):
        self.close()

    def lock(self):
        for cmd in ["i3lock", "loginctl lock-session"]:
            if subprocess.run(cmd, shell=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL).returncode == 0:
                break
        self.close()

    def logout(self):
        for cmd in ["i3-msg exit", "xfce4-session-logout --logout"]:
            if subprocess.run(cmd, shell=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL).returncode == 0:
                break
        self.close()

    def reboot(self):
        subprocess.run(["systemctl", "reboot"])
        self.close()

    def shutdown(self):
        subprocess.run(["systemctl", "poweroff"])
        self.close()

if __name__ == "__main__":
    app = QApplication(sys.argv)
    app.setQuitOnLastWindowClosed(False)
    app.setStyle("Fusion")

    # Set icon theme to match XFCE
    try:
        result = subprocess.run(
            ["xfconf-query", "-c", "xsettings", "-p", "/Net/IconThemeName"],
            stdout=subprocess.PIPE, stderr=subprocess.DEVNULL, text=True
        )
        if result.returncode == 0 and result.stdout.strip():
            QIcon.setThemeName(result.stdout.strip())
        else:
            for fallback in ["Papirus", "Adwaita", "gnome", "hicolor"]:
                if (Path("/usr/share/icons") / fallback).exists():
                    QIcon.setThemeName(fallback)
                    break
    except Exception:
        pass

    launcher = Launcher()
    launcher.show()
    sys.exit(app.exec_())