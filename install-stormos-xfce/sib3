#!/usr/bin/env python3

import gi
import subprocess
import os
import time
import shutil
import traceback
import multiprocessing

gi.require_version('Gtk', '3.0')
gi.require_version('Vte', '2.91')
from gi.repository import Gtk, GLib, Vte, Pango, Gdk


class ArchIsoBuilder(Gtk.Window):

    REQUIRED_PACKAGES = [
        'archiso', 'mkinitcpio-archiso', 'calamares-app'
    ]

    USER_HOME = os.path.expanduser("~")
    STORMOS_DIR = os.path.join(USER_HOME, "Desktop", "stormos-build-files", "install-stormos-xfce")
    OUTPUT_DIR = os.path.join(USER_HOME, "Desktop", "StormOS-ISO")
    GIT_REPO = "https://github.com/bfitzgit23/stormos-build-files"
    LOCAL_PACKAGE_DIR = os.path.join(STORMOS_DIR, "local_packages")  # Directory containing local .zst files

    def __init__(self):
        Gtk.Window.__init__(self, title="StormOS ISO Builder v3")
        self.set_border_width(10)
        self.set_default_size(800, 600)

        vbox = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=10)
        self.add(vbox)

        # Terminal for output using Vte
        self.terminal = Vte.Terminal()
        self.terminal.set_font(Pango.FontDescription('monospace 10'))
        self.terminal.set_scroll_on_output(True)
        vbox.pack_start(self.terminal, True, True, 0)

        # Connect signals for copy/paste functionality
        self.terminal.connect("button-press-event", self.on_terminal_button_press_event)
        self.terminal.connect("key-press-event", self.on_terminal_key_press_event)

        self.progress_bar = Gtk.ProgressBar()
        vbox.pack_start(self.progress_bar, False, False, 0)

        hbox = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=10)
        vbox.pack_start(hbox, False, False, 0)

        self.use_existing_checkbox = Gtk.CheckButton(label="Use existing git clone")
        self.use_existing_checkbox.set_active(True)  # Default to using existing clone if available
        hbox.pack_start(self.use_existing_checkbox, False, False, 0)

        self.update_git_button = Gtk.Button(label="Update Git Clone")
        self.update_git_button.connect("clicked", self.on_update_git_button_clicked)
        hbox.pack_start(self.update_git_button, False, False, 0)

        self.build_button = Gtk.Button(label="Build ISO")
        self.build_button.connect("clicked", self.on_build_button_clicked)
        hbox.pack_start(self.build_button, False, False, 0)

        # Processor selection
        cpu_count = multiprocessing.cpu_count()
        self.processor_label = Gtk.Label(label="Processors:")
        hbox.pack_start(self.processor_label, False, False, 0)

        adjustment = Gtk.Adjustment(value=cpu_count, lower=1, upper=cpu_count, step_increment=1)
        self.processor_spinbutton = Gtk.SpinButton()
        self.processor_spinbutton.set_adjustment(adjustment)
        self.processor_spinbutton.set_value(cpu_count)
        hbox.pack_start(self.processor_spinbutton, False, False, 0)

        # Detect if GPU is available and capable
        self.gpu_available = self.is_gpu_available()

        # Add GPU toggle if GPU is capable
        if self.gpu_available:
            self.gpu_checkbox = Gtk.CheckButton(label="Use GPU Acceleration")
            self.gpu_checkbox.set_active(False)  # Default to GPU acceleration off
            hbox.pack_start(self.gpu_checkbox, False, False, 0)

        # Initialize the root commands list
        self.root_commands = []

        # Ensure the OUTPUT_DIR and STORMOS_DIR exist before proceeding
        self.ensure_directories_exist()

        # Delay this to ensure the terminal is fully initialized
        GLib.idle_add(self.check_and_install_packages)

    def on_terminal_button_press_event(self, widget, event):
        if event.type == Gdk.EventType.BUTTON_PRESS and event.button == 3:  # Right-click
            menu = Gtk.Menu()

            copy_item = Gtk.MenuItem(label="Copy")
            copy_item.connect("activate", self.on_copy_activate)
            menu.append(copy_item)

            paste_item = Gtk.MenuItem(label="Paste")
            paste_item.connect("activate", self.on_paste_activate)
            menu.append(paste_item)

            menu.show_all()
            menu.popup_at_pointer(event)

            return True  # Event has been handled
        return False

    def on_copy_activate(self, menu_item):
        self.terminal.copy_clipboard()

    def on_paste_activate(self, menu_item):
        self.terminal.paste_clipboard()

    def on_terminal_key_press_event(self, widget, event):
        keyval = event.keyval
        state = event.state

        ctrl = state & Gdk.ModifierType.CONTROL_MASK
        shift = state & Gdk.ModifierType.SHIFT_MASK

        if ctrl and shift and keyval == Gdk.KEY_C:
            self.terminal.copy_clipboard()
            return True
        elif ctrl and shift and keyval == Gdk.KEY_V:
            self.terminal.paste_clipboard()
            return True
        else:
            return False  # Let the terminal handle other key events

    def is_gpu_available(self):
        """Check if GPU acceleration is possible."""
        try:
            # First, check if a GPU is present
            result = subprocess.run(['lspci'], capture_output=True, text=True)
            gpu_detected = False
            gpu_type = None  # To store whether it's NVIDIA, AMD, or Intel

            for line in result.stdout.split('\n'):
                if ('VGA compatible controller' in line or 'Display controller' in line) and ('NVIDIA' in line or 'AMD' in line or 'Intel' in line):
                    gpu_detected = True
                    if 'NVIDIA' in line:
                        gpu_type = 'NVIDIA'
                    elif 'AMD' in line:
                        gpu_type = 'AMD'
                    elif 'Intel' in line:
                        gpu_type = 'Intel'
                    break

            if not gpu_detected:
                self.append_terminal_text("No GPU detected on the system.\n")
                return False

            # Next, check if GPU drivers are installed
            if gpu_type == 'NVIDIA':
                driver_check = subprocess.run(['nvidia-smi'], capture_output=True, text=True)
                if driver_check.returncode != 0:
                    self.append_terminal_text("NVIDIA drivers not found. Please install them to enable GPU acceleration.\n")
                    return False
            elif gpu_type == 'AMD':
                driver_check = subprocess.run(['lsmod'], capture_output=True, text=True)
                if 'amdgpu' not in driver_check.stdout:
                    self.append_terminal_text("AMD GPU drivers not found. Please install them to enable GPU acceleration.\n")
                    return False
            elif gpu_type == 'Intel':
                # Intel GPUs usually have drivers installed by default
                pass

            # Since mksquashfs does not support GPU acceleration by default, we'll use multi-threading instead
            # Remove GPU-accelerated mksquashfs checks
            self.append_terminal_text("GPU detected, but mksquashfs does not support GPU acceleration.\n")
            return False  # Set to False to disable GPU acceleration in the script

        except Exception as e:
            self.append_terminal_text(f"Error detecting GPU capability: {e}\n")
            return False

    def ensure_directories_exist(self):
        """Ensure that OUTPUT_DIR and STORMOS_DIR exist, create them if necessary."""
        self.append_terminal_text(f"Checking if necessary directories exist...\n")

        # Check and create OUTPUT_DIR if it does not exist
        if not os.path.exists(self.OUTPUT_DIR):
            self.append_terminal_text(f"Output directory {self.OUTPUT_DIR} does not exist. Creating...\n")
            os.makedirs(self.OUTPUT_DIR, exist_ok=True)
            self.append_terminal_text(f"Created output directory: {self.OUTPUT_DIR}\n")

        # Check and create STORMOS_DIR if it does not exist
        if not os.path.exists(self.STORMOS_DIR):
            self.append_terminal_text(f"StormOS directory {self.STORMOS_DIR} does not exist. Creating...\n")
            os.makedirs(self.STORMOS_DIR, exist_ok=True)
            self.append_terminal_text(f"Created StormOS directory: {self.STORMOS_DIR}\n")

        # Ensure LOCAL_PACKAGE_DIR exists
        if not os.path.exists(self.LOCAL_PACKAGE_DIR):
            self.append_terminal_text(f"Local package directory {self.LOCAL_PACKAGE_DIR} does not exist. Creating...\n")
            os.makedirs(self.LOCAL_PACKAGE_DIR, exist_ok=True)
            self.append_terminal_text(f"Created local package directory: {self.LOCAL_PACKAGE_DIR}\n")

    def check_and_install_packages(self):
        """Check if required packages are installed and collect missing ones to install later."""
        self.append_terminal_text("Checking required packages...\n")
        missing_packages = []

        # Check if each required package is installed
        for package in self.REQUIRED_PACKAGES:
            if not self.is_package_installed(package):
                missing_packages.append(package)

        # Collect missing packages to install later
        if missing_packages:
            self.install_missing_packages(missing_packages)
        else:
            self.append_terminal_text("All required packages are already installed.\n")

    def is_package_installed(self, package_name):
        """Check if a package is installed using pacman."""
        result = subprocess.run(['pacman', '-Qs', package_name], capture_output=True, text=True)
        installed = package_name in result.stdout
        if installed:
            self.append_terminal_text(f"Package '{package_name}' is already installed.\n")
        else:
            self.append_terminal_text(f"Package '{package_name}' is NOT installed.\n")
        return installed

    def install_missing_packages(self, packages):
        """Collect the command to install missing packages."""
        for package in packages:
            if package == 'calamares-app':
                # Path to the local calamares-app.zst file
                local_zst = os.path.join(self.LOCAL_PACKAGE_DIR, f"{package}.zst")
                if os.path.exists(local_zst):
                    # Install from the local .zst file
                    self.append_terminal_text(f"Installing '{package}' from local file: {local_zst}\n")
                    command = f"pacman -U '{local_zst}' --noconfirm"
                else:
                    # Attempt to install from the official repositories
                    self.append_terminal_text(f"Local package file for '{package}' not found. Attempting to install from repository.\n")
                    command = f"pacman -S --needed --noconfirm {package}"
            else:
                # Install other packages from the official repositories
                self.append_terminal_text(f"Installing package from repository: {package}\n")
                command = f"pacman -S --needed --noconfirm {package}"

            self.root_commands.append(command)
            self.append_terminal_text(f"Queued command: {command}\n")

        # Inform the user that the installation commands have been collected
        self.append_terminal_text("Missing packages have been queued for installation.\n")

    def clone_or_update_git_repo(self, force_update=False):
        use_existing = self.use_existing_checkbox.get_active()

        # Only clone or update the repo when explicitly requested
        if not use_existing or force_update:
            repo_parent_dir = os.path.dirname(self.STORMOS_DIR)

            # If "Use existing" is unchecked or force_update is True, delete and re-clone the repo
            if os.path.exists(repo_parent_dir):
                self.append_terminal_text("Deleting existing repository to download a fresh copy...\n")
                shutil.rmtree(repo_parent_dir)

            self.append_terminal_text(f"Cloning repository from {self.GIT_REPO}...\n")
            try:
                command = f"git clone --progress {self.GIT_REPO} '{repo_parent_dir}'"
                # Run the command in the terminal (must be in main thread)
                GLib.idle_add(self.run_command_in_terminal, command)
            except Exception as e:
                self.append_terminal_text(f"Git clone failed: {e}\n")
        else:
            self.append_terminal_text("Using existing Git clone. No update needed.\n")

    def on_update_git_button_clicked(self, widget):
        """Handler for the 'Update Git Clone' button."""
        self.append_terminal_text("Updating Git clone...\n")
        # Remove threading, call directly
        self.clone_or_update_git_repo(force_update=True)

    def scan_stormos_dir(self):
        self.append_terminal_text(f"Scanning {self.STORMOS_DIR} for necessary files and folders...\n")
        required_files = ["packages.x86_64", "profiledef.sh", "pacman.conf"]
        required_dirs = ["syslinux", "grub"]

        for required_file in required_files:
            file_path = os.path.join(self.STORMOS_DIR, required_file)
            if not os.path.exists(file_path):
                self.append_terminal_text(f"Missing: {required_file}. Creating default...\n")
                self.create_required_file(required_file)
            else:
                self.append_terminal_text(f"Found: {required_file}\n")

        for required_dir in required_dirs:
            dir_path = os.path.join(self.STORMOS_DIR, required_dir)
            if not os.path.exists(dir_path):
                self.append_terminal_text(f"Missing: {required_dir} directory. Creating it...\n")
                os.makedirs(dir_path)
                self.create_required_file(required_dir)
            else:
                self.append_terminal_text(f"Found: {required_dir} directory\n")

    def create_required_file(self, filename):
        # Logic to create missing files like "packages.x86_64", "profiledef.sh", etc.
        if filename == "packages.x86_64":
            with open(os.path.join(self.STORMOS_DIR, "packages.x86_64"), "w") as f:
                f.write("base\nlinux\nlinux-firmware\nsyslinux\n")

        elif filename == "pacman.conf":
            default_pacman_conf = "/etc/pacman.conf"
            if os.path.exists(default_pacman_conf):
                shutil.copy(default_pacman_conf, os.path.join(self.STORMOS_DIR, "pacman.conf"))
            else:
                self.append_terminal_text(f"Default pacman.conf not found at {default_pacman_conf}.\n")

        elif filename == "syslinux":
            syslinux_dir = os.path.join(self.STORMOS_DIR, "syslinux")
            os.makedirs(syslinux_dir, exist_ok=True)
            with open(os.path.join(syslinux_dir, "syslinux.cfg"), "w") as f:
                f.write(
                    "DEFAULT linux\n"
                    "LABEL linux\n"
                    "    LINUX /boot/vmlinuz-linux\n"
                    "    INITRD /boot/initramfs-linux.img\n"
                    "    APPEND root=/dev/sda1 rw\n"
                )

        elif filename == "grub":
            grub_dir = os.path.join(self.STORMOS_DIR, "grub")
            os.makedirs(grub_dir, exist_ok=True)
            with open(os.path.join(grub_dir, "grub.cfg"), "w") as f:
                f.write(
                    "set default=0\n"
                    "set timeout=5\n\n"
                    "menuentry 'Arch Linux' {\n"
                    "    linux /boot/vmlinuz-linux root=/dev/sda1 rw\n"
                    "    initrd /boot/initramfs-linux.img\n"
                    "}\n"
                )

        elif filename == "profiledef.sh":
            profiledef_path = os.path.join(self.STORMOS_DIR, "profiledef.sh")
            with open(profiledef_path, "w") as f:
                f.write(
                    "#!/bin/bash\n"
                    "iso_name=\"stormos\"\n"
                    "iso_label=\"STORMOS_$(date +%Y%m)\"\n"
                    "iso_version=\"$(date +%Y.%m.%d)\"\n"
                )
            os.chmod(profiledef_path, 0o755)

        self.append_terminal_text(f"Created required file: {filename}\n")

    def generate_generic_calamares_config(self):
        self.append_terminal_text("Generating generic Calamares configuration...\n")

        generic_config = """
---
# Calamares Generic Config
modules:
  - welcome
  - locale
  - keyboard
  - partition
  - users
  - summary
  - finished
"""
        calamares_dir = os.path.join(self.STORMOS_DIR, 'calamares')
        os.makedirs(calamares_dir, exist_ok=True)

        with open(os.path.join(calamares_dir, 'settings.conf'), 'w') as f:
            f.write(generic_config)

        self.append_terminal_text("Generic Calamares configuration generated successfully.\n")

    def on_build_button_clicked(self, widget):
        self.append_terminal_text("Starting ISO build...\n")
        # Since we're running commands in the terminal, we don't need threading
        self.build_iso()

    def clean_up_previous_build(self):
        self.append_terminal_text("Cleaning up previous build files...\n")

        work_dir = os.path.join(self.OUTPUT_DIR, 'work')
        if os.path.exists(work_dir):
            command = f"rm -rf '{work_dir}'"
            self.root_commands.append(command)
            self.append_terminal_text(f"Queued removal of work directory: {work_dir}\n")

        if os.path.exists(self.OUTPUT_DIR):
            for file_name in os.listdir(self.OUTPUT_DIR):
                if file_name.endswith('.iso'):
                    file_path = os.path.join(self.OUTPUT_DIR, file_name)
                    command = f"rm -f '{file_path}'"
                    self.root_commands.append(command)
                    self.append_terminal_text(f"Queued removal of old ISO file: {file_path}\n")

    def build_iso(self):
        try:
            # Start the timer
            self.start_time = time.time()

            self.clean_up_previous_build()
            self.scan_stormos_dir()

            self.append_terminal_text("Starting mkarchiso build process...\n")

            # Ensure work directory exists before starting mkarchiso
            work_dir = os.path.join(self.OUTPUT_DIR, 'work')
            os.makedirs(work_dir, exist_ok=True)  # Create the work directory if it doesn't exist

            # Get the number of processors from the spin button
            processors = int(self.processor_spinbutton.get_value())
            self.append_terminal_text(f"Using {processors} processor(s) for the build process.\n")

            # Generate the CPU list for taskset
            cpu_list = ",".join(map(str, range(processors)))
            self.append_terminal_text(f"CPU Affinity set to CPUs: {cpu_list}\n")

            # Since mksquashfs does not support GPU acceleration, use multi-threading instead
            mksquashfs_options = f"-processors {processors}"
            mkarchiso_command = (
                f"export MKSQUASHFS_OPTIONS='{mksquashfs_options}'; "
                f"taskset -c {cpu_list} mkarchiso -v -w '{work_dir}' "
                f"-o '{self.OUTPUT_DIR}' '{self.STORMOS_DIR}'"
            )

            self.root_commands.append(mkarchiso_command)
            self.append_terminal_text(f"Queued build command: {mkarchiso_command}\n")

            # Now write all root commands to a script with verification
            script_path = os.path.join(self.USER_HOME, 'build.sh')
            with open(script_path, 'w') as script_file:
                script_file.write('#!/bin/bash\n')
                script_file.write('set -e\n')  # Exit immediately if a command exits with a non-zero status
                for cmd in self.root_commands:
                    script_file.write(f"{cmd}\n")
                    # Extract the package name for verification
                    if 'pacman -U' in cmd:
                        package_name = cmd.split("'")[1].replace('.zst', '')
                    elif 'pacman -S' in cmd:
                        package_name = cmd.split()[-1]
                    else:
                        package_name = None

                    if package_name:
                        # Add verification step after installation
                        script_file.write(f"pacman -Qs {package_name} > /dev/null || {{ echo \"Error: Package '{package_name}' failed to install.\"; exit 1; }}\n")

            os.chmod(script_path, 0o755)
            self.append_terminal_text(f"Build script created at: {script_path}\n")

            # Now run pkexec bash script.sh in the terminal
            command = f"pkexec bash '{script_path}'"
            self.append_terminal_text(f"Executing build script with command: {command}\n")
            self.run_command_in_terminal(command)

            # Clear root_commands for next time
            self.root_commands.clear()

            # Connect to terminal's "child-exited" signal to detect when the process is complete
            self.terminal.connect("child-exited", self.on_build_completed)

        except Exception as e:
            error_message = traceback.format_exc()
            self.append_terminal_text(f"An unexpected error occurred: {error_message}\n")
            self.show_error_dialog("Unexpected Error", error_message)

    def on_build_completed(self, terminal, status):
        """Called when the build process in the terminal has completed."""
        if status == 0:
            self.append_terminal_text("Build process completed successfully.\n")
            # End the timer
            end_time = time.time()

            iso_files = [f for f in os.listdir(self.OUTPUT_DIR) if f.endswith('.iso')]
            if iso_files:
                iso_path = os.path.join(self.OUTPUT_DIR, iso_files[0])
                GLib.idle_add(self.append_terminal_text, f"ISO build completed successfully. ISO located at: {iso_path}\n")
            else:
                GLib.idle_add(self.append_terminal_text, "Build completed, but no ISO file found.\n")

            # Calculate and display the total build time
            total_time = end_time - self.start_time
            minutes, seconds = divmod(total_time, 60)
            GLib.idle_add(self.append_terminal_text, f"Total build time: {int(minutes)} minutes and {int(seconds)} seconds.\n")
        else:
            self.append_terminal_text("Build process failed due to package installation errors.\n")
            GLib.idle_add(self.append_terminal_text, "Please check the terminal output for details.\n")
            # Optionally, show an error dialog
            self.show_error_dialog("Build Failed", "One or more packages failed to install. Please check the terminal output for details.")

    def show_error_dialog(self, title, message):
        """Show an error dialog to alert the user of an issue."""
        dialog = Gtk.MessageDialog(
            self,
            0,
            Gtk.MessageType.ERROR,
            Gtk.ButtonsType.OK,
            title
        )
        dialog.format_secondary_text(message)
        dialog.run()
        dialog.destroy()

    def append_terminal_text(self, text):
        """Append text to the Vte.Terminal widget and log to a file."""
        self.terminal.feed(text.encode('utf-8'))
        with open(os.path.join(self.USER_HOME, 'stormos_build.log'), 'a') as log_file:
            log_file.write(text)

    def run_command_in_terminal(self, command):
        """Run a command in the terminal."""
        self.terminal.reset(True, True)
        self.terminal.spawn_async(
            Vte.PtyFlags.DEFAULT,
            os.environ['HOME'],
            ["/bin/bash", "-c", command],
            [],
            0,
            None,
            None,
            -1,
            None,
            None,
        )


if __name__ == "__main__":
    builder = ArchIsoBuilder()
    builder.connect("destroy", Gtk.main_quit)
    builder.show_all()
    Gtk.main()
