#!/usr/bin/env python3
"""
StormOS Launcher - Tokyo Night
A clean, elegant application launcher.
"""

import sys
import subprocess
import json
import re
from pathlib import Path
from collections import defaultdict, deque
from typing import List, Dict, Any

from PyQt5.QtWidgets import (
    QApplication, QWidget, QVBoxLayout, QHBoxLayout, QLineEdit,
    QScrollArea, QPushButton, QLabel, QFrame, QButtonGroup, QShortcut
)
from PyQt5.QtCore import Qt, QTimer
from PyQt5.QtGui import QFont, QIcon, QKeySequence, QPainter, QColor, QPalette

# =============================================================================
# TOKYO NIGHT THEME
# =============================================================================

class TokyoNight:
    # Base colors - no transparency
    BACKGROUND = "#1a1b26"  # Deep blue
    SURFACE = "#16161e"     # Darker blue
    ACCENT = "#7aa2f7"      # Bright blue
    TEXT_PRIMARY = "#c0caf5"
    TEXT_SECONDARY = "#a9b1d6"
    
    # Accent colors
    SUCCESS = "#9ece6a"
    WARNING = "#e0af68"
    ERROR = "#f7768e"
    PURPLE = "#bb9af7"
    CYAN = "#7dcfff"

# =============================================================================
# CONFIGURATION
# =============================================================================

CONFIG_DIR = Path.home() / ".config" / "stormos_launcher"
FAV_FILE = CONFIG_DIR / "favorites.json"
RECENT_FILE = CONFIG_DIR / "recent.json"
CACHE_FILE = CONFIG_DIR / "apps_cache.json"

CATEGORIES = {
    "Favorites": {"icon": "‚òÖ", "color": TokyoNight.WARNING},
    "Recent": {"icon": "üïí", "color": TokyoNight.CYAN},
    "All Apps": {"icon": "üñ•Ô∏è", "color": TokyoNight.TEXT_PRIMARY},
    "Development": {"icon": "‚öôÔ∏è", "color": TokyoNight.SUCCESS},
    "Games": {"icon": "üéÆ", "color": TokyoNight.ERROR},
    "Graphics": {"icon": "üé®", "color": TokyoNight.PURPLE},
    "Internet": {"icon": "üåê", "color": TokyoNight.ACCENT},
    "Multimedia": {"icon": "üéµ", "color": TokyoNight.PURPLE},
    "Office": {"icon": "üìä", "color": TokyoNight.CYAN},
    "System": {"icon": "üîß", "color": TokyoNight.TEXT_SECONDARY},
    "Other": {"icon": "üì¶", "color": TokyoNight.TEXT_SECONDARY}
}

# =============================================================================
# UTILITIES
# =============================================================================

def load_json(path: Path, default: Any) -> Any:
    """Load JSON data from file."""
    try:
        return json.loads(path.read_text()) if path.exists() else default
    except Exception:
        return default

def save_json(path: Path, data: Any) -> None:
    """Save JSON data to file."""
    try:
        path.parent.mkdir(parents=True, exist_ok=True)
        path.write_text(json.dumps(data, indent=2))
    except Exception:
        pass

# =============================================================================
# CLEAN WIDGETS
# =============================================================================

class CleanSearchBar(QLineEdit):
    """Clean search bar with solid styling."""
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setPlaceholderText("üîç Search applications...")
        self.setFont(QFont("JetBrains Mono", 11))
        self.setMinimumHeight(50)
        self.setStyleSheet(f"""
            QLineEdit {{
                background: {TokyoNight.SURFACE};
                color: {TokyoNight.TEXT_PRIMARY};
                border: 2px solid {TokyoNight.ACCENT};
                border-radius: 12px;
                padding: 12px 20px;
                font-size: 14px;
            }}
            QLineEdit:focus {{
                border: 2px solid {TokyoNight.ACCENT};
                background: {TokyoNight.SURFACE};
            }}
        """)

class CleanCategoryButton(QPushButton):
    """Clean category button with solid styling."""
    
    def __init__(self, category: str, icon: str, color: str, parent=None):
        super().__init__(f"{icon} {category}", parent)
        self.category = category
        self.base_color = color
        self.setCheckable(True)
        self.setFixedHeight(40)
        self.setCursor(Qt.PointingHandCursor)
        self.setFont(QFont("JetBrains Mono", 9))
        self.setStyleSheet(f"""
            QPushButton {{
                background: {TokyoNight.SURFACE};
                color: {TokyoNight.TEXT_PRIMARY};
                border: 1px solid {TokyoNight.SURFACE};
                border-radius: 8px;
                padding: 8px 12px;
                text-align: left;
            }}
            QPushButton:hover {{
                background: {TokyoNight.BACKGROUND};
                border: 1px solid {self.base_color};
            }}
            QPushButton:checked {{
                background: {TokyoNight.BACKGROUND};
                border: 2px solid {self.base_color};
                color: {self.base_color};
            }}
        """)

class CleanAppItem(QWidget):
    """Clean application item with solid styling."""
    
    def __init__(self, app: Dict[str, Any], launcher: 'CleanLauncher'):
        super().__init__()
        self.app = app
        self.launcher = launcher
        self.is_favorite = app["name"] in launcher.favorites
        self.setup_ui()
        
    def setup_ui(self):
        self.setFixedHeight(60)
        layout = QHBoxLayout(self)
        layout.setContentsMargins(12, 6, 12, 6)
        layout.setSpacing(12)

        # Icon
        self.icon_label = QLabel()
        self.icon_label.setFixedSize(36, 36)
        self.load_icon()
        layout.addWidget(self.icon_label)

        # Text
        text_layout = QVBoxLayout()
        text_layout.setSpacing(2)
        
        self.name_label = QLabel(self.app["name"])
        self.name_label.setFont(QFont("JetBrains Mono", 10))
        self.name_label.setStyleSheet(f"color: {TokyoNight.TEXT_PRIMARY};")
        text_layout.addWidget(self.name_label)
        
        if self.app.get("comment"):
            self.desc_label = QLabel(self.app["comment"])
            self.desc_label.setFont(QFont("JetBrains Mono", 8))
            self.desc_label.setStyleSheet(f"color: {TokyoNight.TEXT_SECONDARY};")
            text_layout.addWidget(self.desc_label)
            
        layout.addLayout(text_layout)
        layout.addStretch()

        # Favorite
        self.fav_label = QLabel("‚òÖ" if self.is_favorite else "‚òÜ")
        self.fav_label.setFont(QFont("JetBrains Mono", 12))
        self.fav_label.setStyleSheet(f"color: {TokyoNight.WARNING};")
        self.fav_label.setFixedWidth(20)
        layout.addWidget(self.fav_label)

        self.setStyleSheet(f"""
            QWidget {{
                background: transparent;
                border-radius: 8px;
            }}
            QWidget:hover {{
                background: {TokyoNight.SURFACE};
                border: 1px solid {TokyoNight.ACCENT};
            }}
        """)
        
    def load_icon(self):
        icon_name = self.app.get("icon", "application-x-executable")
        qicon = QIcon.fromTheme(icon_name)
        
        if not qicon.isNull():
            self.icon_label.setPixmap(qicon.pixmap(36, 36))
        else:
            self.icon_label.setText("üì¶")
            self.icon_label.setAlignment(Qt.AlignCenter)
            self.icon_label.setStyleSheet(f"""
                background: {TokyoNight.SURFACE};
                border-radius: 6px;
                color: {TokyoNight.TEXT_SECONDARY};
                font-size: 16px;
            """)
            
    def mousePressEvent(self, event):
        if event.button() == Qt.LeftButton:
            if event.modifiers() & Qt.ControlModifier:
                self.toggle_favorite()
            else:
                self.launcher.launch_app(self.app)
        elif event.button() == Qt.RightButton:
            self.toggle_favorite()
            
    def toggle_favorite(self):
        name = self.app["name"]
        if name in self.launcher.favorites:
            self.launcher.favorites.remove(name)
            self.is_favorite = False
            self.fav_label.setText("‚òÜ")
        else:
            self.launcher.favorites.append(name)
            self.is_favorite = True
            self.fav_label.setText("‚òÖ")
            
        save_json(FAV_FILE, self.launcher.favorites)
        self.launcher.filter_apps()

# =============================================================================
# MAIN LAUNCHER
# =============================================================================

class CleanLauncher(QWidget):
    """Clean, elegant application launcher."""
    
    def __init__(self):
        super().__init__()
        self.favorites = load_json(FAV_FILE, [])
        self.recent = deque(load_json(RECENT_FILE, []), maxlen=15)
        self.apps = []
        self.categories = defaultdict(list)
        self.current_category = "All Apps"
        self.category_buttons = {}
        
        self.setup_window()
        self.setup_ui()
        self.setup_shortcuts()
        
        QTimer.singleShot(50, self.load_apps)
        
    def setup_window(self):
        """Configure window properties."""
        self.setWindowFlags(Qt.FramelessWindowHint | Qt.Popup | Qt.WindowStaysOnTopHint)
        self.setAttribute(Qt.WA_TranslucentBackground)
        self.setFocusPolicy(Qt.StrongFocus)
        self.setFixedSize(800, 600)
        
        # Center on screen
        screen = QApplication.primaryScreen().availableGeometry()
        self.move(
            screen.center().x() - self.width() // 2,
            screen.center().y() - self.height() // 2
        )
        
    def setup_ui(self):
        """Setup the user interface."""
        layout = QVBoxLayout(self)
        layout.setContentsMargins(20, 20, 20, 20)
        layout.setSpacing(15)
        
        # Search
        self.search_bar = CleanSearchBar()
        self.search_bar.textChanged.connect(self.filter_apps)
        self.search_bar.returnPressed.connect(self.handle_enter)
        layout.addWidget(self.search_bar)
        
        # Content area
        content_layout = QHBoxLayout()
        content_layout.setSpacing(20)
        
        # Sidebar
        self.setup_sidebar(content_layout)
        # Apps area
        self.setup_apps_area(content_layout)
        
        layout.addLayout(content_layout)
        
        # System controls
        self.setup_system_controls(layout)
        
    def setup_sidebar(self, parent_layout):
        """Setup category sidebar with proper spacing."""
        sidebar = QFrame()
        sidebar.setFixedWidth(160)
        sidebar_layout = QVBoxLayout(sidebar)
        sidebar_layout.setContentsMargins(0, 0, 0, 0)
        sidebar_layout.setSpacing(6)
        
        # Title with proper margin
        title = QLabel("Categories")
        title.setFont(QFont("JetBrains Mono", 10, QFont.Bold))
        title.setStyleSheet(f"color: {TokyoNight.TEXT_PRIMARY}; padding: 8px 0px;")
        title.setAlignment(Qt.AlignCenter)
        sidebar_layout.addWidget(title)
        
        # Add a spacer to ensure buttons don't go to the very bottom
        sidebar_layout.addSpacing(10)
        
        # Buttons with proper spacing
        self.cat_group = QButtonGroup(self)
        for cat_name, cat_info in CATEGORIES.items():
            btn = CleanCategoryButton(cat_name, cat_info["icon"], cat_info["color"])
            btn.clicked.connect(lambda checked, c=cat_name: self.switch_category(c))
            self.cat_group.addButton(btn)
            self.category_buttons[cat_name] = btn
            sidebar_layout.addWidget(btn)
            
        # Add flexible space at the bottom to prevent cutting off
        sidebar_layout.addStretch(1)
        
        parent_layout.addWidget(sidebar)
        
    def setup_apps_area(self, parent_layout):
        """Setup applications scroll area."""
        self.scroll_area = QScrollArea()
        self.scroll_area.setWidgetResizable(True)
        self.scroll_area.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
        self.scroll_area.setVerticalScrollBarPolicy(Qt.ScrollBarAsNeeded)
        self.scroll_area.setFrameShape(QFrame.NoFrame)
        
        self.scroll_area.setStyleSheet(f"""
            QScrollArea {{
                background: transparent;
                border: none;
            }}
            QScrollBar:vertical {{
                background: {TokyoNight.SURFACE};
                width: 6px;
                border-radius: 3px;
            }}
            QScrollBar::handle:vertical {{
                background: {TokyoNight.ACCENT};
                border-radius: 3px;
                min-height: 20px;
            }}
        """)
        
        self.apps_container = QWidget()
        self.apps_layout = QVBoxLayout(self.apps_container)
        self.apps_layout.setSpacing(3)
        self.apps_layout.setContentsMargins(5, 5, 10, 5)
        self.apps_layout.addStretch()
        
        self.scroll_area.setWidget(self.apps_container)
        parent_layout.addWidget(self.scroll_area)
        
    def setup_system_controls(self, parent_layout):
        """Setup system control buttons."""
        controls = QFrame()
        controls_layout = QHBoxLayout(controls)
        controls_layout.setContentsMargins(0, 10, 0, 0)
        controls_layout.setSpacing(8)
        
        actions = [
            ("üîí Lock", self.lock_system, TokyoNight.ACCENT),
            ("‚èæ Sleep", self.suspend_system, TokyoNight.PURPLE),
            ("üö™ Logout", self.logout, TokyoNight.WARNING),
            ("üîÑ Reboot", self.reboot, TokyoNight.SUCCESS),
            ("‚èª Shutdown", self.shutdown, TokyoNight.ERROR)
        ]
        
        for text, callback, color in actions:
            btn = QPushButton(text)
            btn.clicked.connect(callback)
            btn.setFixedHeight(30)
            btn.setCursor(Qt.PointingHandCursor)
            btn.setFont(QFont("JetBrains Mono", 9))
            btn.setStyleSheet(f"""
                QPushButton {{
                    background: {TokyoNight.SURFACE};
                    color: {TokyoNight.TEXT_PRIMARY};
                    border: 1px solid {color};
                    border-radius: 6px;
                    padding: 5px 10px;
                }}
                QPushButton:hover {{
                    background: {color};
                    color: {TokyoNight.BACKGROUND};
                }}
            """)
            controls_layout.addWidget(btn)
            
        controls_layout.addStretch()
        parent_layout.addWidget(controls)
        
    def setup_shortcuts(self):
        """Setup keyboard shortcuts."""
        QShortcut(QKeySequence("Escape"), self).activated.connect(self.close)
        QShortcut(QKeySequence("Ctrl+Q"), self).activated.connect(self.close)
        QShortcut(QKeySequence("Ctrl+L"), self).activated.connect(self.search_bar.setFocus)
        
    def paintEvent(self, event):
        """Draw window with solid background."""
        painter = QPainter(self)
        painter.setRenderHint(QPainter.Antialiasing)
        
        # Main background - solid
        painter.setBrush(QColor(TokyoNight.BACKGROUND))
        painter.setPen(QColor(TokyoNight.ACCENT))
        painter.drawRoundedRect(self.rect(), 15, 15)
        
    def keyPressEvent(self, event):
        if event.key() == Qt.Key_Escape:
            self.close()
            event.accept()
        else:
            super().keyPressEvent(event)
            
    def focusOutEvent(self, event):
        QTimer.singleShot(50, self.close)
        
    # =========================================================================
    # APP MANAGEMENT
    # =========================================================================
    
    def load_apps(self):
        """Load applications from desktop files."""
        desktop_dirs = [
            Path("/usr/share/applications"),
            Path.home() / ".local/share/applications"
        ]
        
        cat_map = {
            "Audio": "Multimedia", "Video": "Multimedia", "AudioVideo": "Multimedia",
            "Development": "Development", "Game": "Games", "Graphics": "Graphics",
            "Network": "Internet", "Office": "Office", "System": "System",
            "Utility": "Utilities", "Settings": "System"
        }
        
        self.apps.clear()
        self.categories.clear()
        
        for desktop_dir in desktop_dirs:
            if desktop_dir.exists():
                for desktop_file in desktop_dir.glob("*.desktop"):
                    try:
                        content = desktop_file.read_text()
                        if "NoDisplay=true" in content:
                            continue
                            
                        name = re.search(r'^Name=(.+)$', content, re.M)
                        exec_cmd = re.search(r'^Exec=(.+)$', content, re.M)
                        icon = re.search(r'^Icon=(.+)$', content, re.M)
                        comment = re.search(r'^Comment=(.+)$', content, re.M)
                        categories = re.search(r'^Categories=(.+)$', content, re.M)
                        
                        if not (name and exec_cmd):
                            continue
                            
                        # Determine category
                        app_category = "Other"
                        if categories:
                            for cat in categories.group(1).split(';'):
                                if cat in cat_map:
                                    app_category = cat_map[cat]
                                    break
                                    
                        app_data = {
                            "name": name.group(1),
                            "exec": exec_cmd.group(1),
                            "icon": icon.group(1) if icon else None,
                            "comment": comment.group(1) if comment else "",
                            "category": app_category,
                        }
                        
                        self.apps.append(app_data)
                        self.categories[app_category].append(app_data)
                        
                    except Exception:
                        continue
                        
        self.switch_category(self.current_category)
        
    def switch_category(self, category: str):
        """Switch application category."""
        self.current_category = category
        if category in self.category_buttons:
            self.category_buttons[category].setChecked(True)
        self.filter_apps()
        
    def filter_apps(self):
        """Filter applications based on search and category."""
        query = self.search_bar.text().lower().strip()
        
        # Clear existing apps
        while self.apps_layout.count() > 1:
            item = self.apps_layout.takeAt(0)
            if item.widget():
                item.widget().deleteLater()
                
        # Get apps for current category
        if self.current_category == "Favorites":
            apps = [a for a in self.apps if a["name"] in self.favorites]
        elif self.current_category == "Recent":
            apps = [a for a in self.apps if a["name"] in self.recent]
        elif self.current_category == "All Apps":
            apps = self.apps
        else:
            apps = self.categories.get(self.current_category, [])
            
        # Apply search filter
        if query:
            apps = [
                a for a in apps
                if query in a["name"].lower() or 
                   (a.get("comment") and query in a["comment"].lower())
            ]
            
        # Display apps
        for app in sorted(apps, key=lambda x: x["name"].lower()):
            self.apps_layout.insertWidget(
                self.apps_layout.count() - 1, 
                CleanAppItem(app, self)
            )
            
        # Empty state
        if not apps:
            label = QLabel("No applications found")
            label.setAlignment(Qt.AlignCenter)
            label.setStyleSheet(f"color: {TokyoNight.TEXT_SECONDARY}; padding: 40px;")
            self.apps_layout.insertWidget(0, label)
            
    def launch_app(self, app: Dict[str, Any]):
        """Launch an application."""
        # Update recent apps
        if app["name"] in self.recent:
            self.recent.remove(app["name"])
        self.recent.appendleft(app["name"])
        save_json(RECENT_FILE, list(self.recent))
        
        # Launch
        try:
            exec_cmd = re.sub(r' %[UuFf]', '', app["exec"]).strip()
            subprocess.Popen(exec_cmd.split(), start_new_session=True)
        except Exception as e:
            print(f"Failed to launch {app['name']}: {e}")
            
        self.close()
        
    def handle_enter(self):
        """Handle enter key in search bar."""
        text = self.search_bar.text().strip()
        if not text:
            return
            
        # Launch first matching app
        for i in range(self.apps_layout.count() - 1):
            item = self.apps_layout.itemAt(i)
            if item and (widget := item.widget()):
                if isinstance(widget, CleanAppItem):
                    self.launch_app(widget.app)
                    return
                    
    # =========================================================================
    # SYSTEM ACTIONS
    # =========================================================================
    
    def lock_system(self):
        subprocess.Popen(["xflock4"])
        self.close()
        
    def suspend_system(self):
        subprocess.run(["systemctl", "suspend"], check=False)
        self.close()
        
    def logout(self):
        subprocess.Popen(["xfce4-session-logout", "--logout"])
        self.close()
        
    def reboot(self):
        subprocess.run(["systemctl", "reboot"], check=False)
        self.close()
        
    def shutdown(self):
        subprocess.run(["systemctl", "poweroff"], check=False)
        self.close()

# =============================================================================
# APPLICATION SETUP
# =============================================================================

def main():
    app = QApplication(sys.argv)
    
    # Clean styling
    app.setStyle("Fusion")
    app.setFont(QFont("JetBrains Mono", 10))
    
    # Set palette
    palette = QPalette()
    palette.setColor(QPalette.Window, QColor(TokyoNight.BACKGROUND))
    palette.setColor(QPalette.WindowText, QColor(TokyoNight.TEXT_PRIMARY))
    palette.setColor(QPalette.Base, QColor(TokyoNight.SURFACE))
    palette.setColor(QPalette.Text, QColor(TokyoNight.TEXT_PRIMARY))
    palette.setColor(QPalette.Button, QColor(TokyoNight.SURFACE))
    palette.setColor(QPalette.ButtonText, QColor(TokyoNight.TEXT_PRIMARY))
    palette.setColor(QPalette.Highlight, QColor(TokyoNight.ACCENT))
    app.setPalette(palette)
    
    # Create launcher
    launcher = CleanLauncher()
    launcher.show()
    launcher.search_bar.setFocus()
    
    sys.exit(app.exec_())

if __name__ == "__main__":
    main()